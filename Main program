#Blockchain program
#Program updated on 4/3/2019

#Begin program
#____________________

import hashlib
import json
import time

block_index = []; chain_lib = []; counter = []

def new_genesis():
	d = {}
	d['index'] = len(block_index)
	print("\n"*5)
	a = input("Please enter your initial data batch:  ")
	d['self_block'] = a
	d['time record'] = time.time()
	d['previous hash'] = None
	return d
	block_index.append(" ")

def new_block():
	d = {}
	d['index'] = len(block_index)
	print("\n"*5)
	e = input("Please enter your data batch:  ")
	d['self_block'] = e
	d['time record'] = time.time()
	d['previous hash'] = chain_lib[len(counter)][1]
	return d
	counter.append(" ")
	block_index.append(" ")

def start():
	g = new_genesis()
	g_list = []
	g_list.append(g)
	g_serial = json.dumps(g, sort_keys=True).encode('utf-8')
	g_hash = hashlib.sha256(g_serial).hexdigest()
	g_list.append(g_hash)
	chain_lib.append(g_list)

def next():
	c = new_block()
	c_list = []
	c_list.append(c)
	c_serial = json.dumps(c, sort_keys=True).encode('utf-8')
	c_hash = hashlib.sha256(c_serial).hexdigest()
	c_list.append(c_hash)
	chain_lib.append(c_list)

def count():
	print("{0}{1} blocks have been added to the block chain.{0}".format("\n"*5,len(counter)))



____________________
Updated verison of the program (as of 4/7/2019).


anchor = ["Index = None", "Time = None", "None", "Prev = None"]

master_memory = []; chron_memory = []; chron_memory.append(anchor)

class block:
	def __init__(self, index, timestamp, data, prev):
		self.index = index
		self.timestamp = timestamp
		self.data = data
		self.prev = prev
		self.hash = self.hash_block()
	def hash_block(self):
		a = (str(self.index)+str(self.timestamp)+str(self.data)+str(self.prev))
		a_ser = json.dumps(a, sort_keys=True).encode('utf-8')
		a_hash = hashlib.sha256(a_ser).hexdigest()
		rrr = a_hash

def new_block():
	def spacer():
		print("\n"*5)
	spacer(); b = input("Please enter your data here:  "); spacer()
	make_prev = chron_memory[len(chron_memory)-1][2]
	s = block(len(chron_memory), time.time(), b, "prev block = {0}".format(make_prev))
	e = {}
	temp_list = []
	temp_list.append(s.index); temp_list.append(s.timestamp);
	temp_list.append(s.data); temp_list.append(s.prev)
	e["  DATA BATCH:  "] = temp_list
	master_memory.append(e); chron_memory.append(temp_list)
	return e; spacer();

def view_chain():
	x = 0
	f = len(chron_memory)
	while x < f:
		print("Block {0}:  {1}{2}".format(x, chron_memory[x], "\n"))
		x = x + 1


#End of program
#____________________
